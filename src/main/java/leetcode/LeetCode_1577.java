package leetcode;

import java.util.HashMap;
import java.util.Map;

/**
 * @description: Given two arrays of integers nums1 and nums2, return the number of triplets formed (type 1 and type 2) under the following rules:
 * <p>
 * Type 1: Triplet (i, j, k) if nums1[i]2 == nums2[j] * nums2[k] where 0 <= i < nums1.length and 0 <= j < k < nums2.length.
 * Type 2: Triplet (i, j, k) if nums2[i]2 == nums1[j] * nums1[k] where 0 <= i < nums2.length and 0 <= j < k < nums1.length.
 * @author: LiShuai
 * @createDate: 2023/8/15 20:00
 * @version: 1.0
 */

public class LeetCode_1577 {

    public static void main(String[] args) {
//        int[] nums1 = {14, 1, 1, 12, 7, 12, 10, 4, 11, 10, 5, 2, 5, 14, 7, 9, 10, 13, 15, 6, 9, 12, 6, 12, 4, 10, 9, 12, 11};
//        int[] nums2 = {3, 12, 1, 9, 1, 12, 4, 12, 4, 1, 7, 10, 7, 11, 4, 13, 4, 11, 5, 1, 14, 12, 15, 4, 2, 3, 13, 10, 3, 4};
        int[] nums1 = {};
        int[] nums2 = {};
        int i = numTriplets_02(nums1, nums2);
        System.out.println(i);
        System.out.println(numTriplets(nums1, nums2));
    }

    public static int numTriplets_02(int[] nums1, int[] nums2) {
        int ans = 0;
        for (int value : nums1) {
            int n = value * value;
            for (int j = 0; j < nums2.length; j++) {
                for (int k = j + 1; k < nums2.length; k++) {
                    if (n == nums2[j] * nums2[k]) {
                        ans++;
                    }
                }
            }
        }
        for (int value : nums2) {
            int n = value * value;
            for (int j = 0; j < nums1.length; j++) {
                for (int k = j + 1; k < nums1.length; k++) {
                    if (n == nums1[j] * nums1[k]) {
                        ans++;
                    }
                }
            }
        }
        return ans;
    }

    public static int numTriplets(int[] nums1, int[] nums2) {
        return helper(nums1, nums2) + helper(nums2, nums1);
    }

    private static int helper(int[] nums1, int[] nums2) {
        Map<Integer, Integer> map = new HashMap<>(nums2.length);
        for (int i : nums2) {
            map.put(i, map.getOrDefault(i, 0) + 1);
        }
        int ans = 0;
        long[] cache = new long[nums1.length];
        for (int i = 0; i < nums1.length; i++) {
            cache[i] = (long) nums1[i] * nums1[i];
        }
        for (int cur : nums2) {
            map.put(cur, map.get(cur) - 1);
            for (int i = 0; i < nums1.length; i++) {
                if (cache[i] % cur == 0) {
                    ans += map.getOrDefault((int) (cache[i] / cur), 0);
                }
            }
        }

        return ans;
    }
}
